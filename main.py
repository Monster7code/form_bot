import asyncio

import aiogram
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.base import StorageKey
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram import F
from keyboards import *
from states import *
import re
from conec import *


id_group = ""
id_admin = ""

class Vote:
    col_for_add = 0
    col_for_drop = 0
    list_of_voters = []
    id_mes_del = aiogram.types.message.Message
    id_mes_add = aiogram.types.message.Message

    def __init__(self):
        self.col_for_add = 0
        self.col_for_drop = 0
        self.list_of_voters = []

    def append_col_for_add(self):
        self.col_for_add += 1

    def append_col_for_drop(self):
        self.col_for_drop += 1

    def append_list_votes(self, user_id):

        if user_id in self.list_of_voters:
            return False
        self.list_of_voters.append(user_id)
        return True


# token suki 6323493760:AAH9r9cDHBTnMecU18g3bVY8mKsTGqgvkPk
bot = Bot("7030266156:AAEU91OszQav7VJDOsGbKqSs7cUs-1G09B0")
loop = asyncio.get_event_loop()
dp = Dispatcher(Bot=bot, loop=loop, storage=MemoryStorage(), parse_mode='HTML')


async def start():
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()
        return dp


@dp.message(Command("start"))
async def any_message(message: Message, state: FSMContext):
    #create_db_and_table()

    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                         reply_markup=ReplyKeyboardRemove())
    await message.answer("üëæ–ü—Ä–∏–≤–µ—Ç! –ò—â–µ—à—å –∫–æ–º–ø–∞–Ω–∏—é?\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤ –Ω–µ—ë –ø–æ–ø–∞—Å—Ç—å,"
                         " –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –ø–æ–µ—Ö–∞–ª–∏?",
                         reply_markup=start_keyboard.as_markup(resize_keyboard=True))


@dp.message(F.text.lower() == "üëæ –ø–æ–µ—Ö–∞–ª–∏")
async def form(message: Message, state: FSMContext):
    await state.set_state(From.start_form)
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
                         reply_markup=default_keyboard.as_markup(resize_keyboard=True))


@dp.message(From.start_form)
async def start_from(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é",
                             reply_markup=start_keyboard.as_markup(resize_keyboard=True))
    else:
        await state.update_data(name=message.text)
        await state.set_state(From.age_form)
        await message.answer(f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {message.text}!\n–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?",
                             reply_markup=default_keyboard.as_markup(resize_keyboard=True))


@dp.message(From.age_form)
async def age_from(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await state.set_state(From.start_form)
        await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
                             reply_markup=default_keyboard.as_markup(resize_keyboard=True))
    else:

        pattern = r'^(\d{1,7})$'
        age = re.search(pattern, message.text)
        if age:
            await state.update_data(age=message.text)
            await state.set_state(From.city_form)
            await message.answer(f"–û—Ç–ª–∏—á–Ω–æ!\n–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?",
                                 reply_markup=default_keyboard.as_markup(resize_keyboard=True))
        else:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç!",

                                 reply_markup=default_keyboard.as_markup(resize_keyboard=True))


@dp.message(From.city_form)
async def city_from(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await state.set_state(From.age_form)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç!",
                             reply_markup=default_keyboard.as_markup(resize_keyboard=True))
    else:
        await state.update_data(city=message.text)
        await state.set_state(From.about_form)
        await message.answer(f"–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ",
                             reply_markup=default_keyboard.as_markup(resize_keyboard=True))


@dp.message(From.about_form)
async def about_from(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await state.set_state(From.city_form)
        await message.answer("–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?",
                             reply_markup=default_keyboard.as_markup(resize_keyboard=True))
    else:
        await state.update_data(about=message.text)
        await state.update_data(banlist=[])
        await state.set_state(From.choice_friend_form)
        await message.answer(f"–ö–æ–≥–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–µ–±–µ –Ω–∞–π—Ç–∏?",
                             reply_markup=edit_keyboard_choice_friend().as_markup(resize_keyboard=True))


@dp.callback_query(F.data.in_(['drunk', 'friend', 'social', 'love_night', 'love', 'back', 'submit']))
async def process_buttons_press(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    banlist = data.get("banlist")
    if callback.data == 'back':
        await callback.message.delete()
        await state.set_state(From.about_form)
        await bot.send_message(callback.from_user.id, f"–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ",
                               reply_markup=default_keyboard.as_markup(resize_keyboard=True))
    elif callback.data == 'submit':
        if len(banlist) == 0:
            await bot.send_message(callback.from_user.id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–µ—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ —Å–ø–∏—Å–∫–∞?")
        else:
            await state.update_data(banlist_result=banlist)
            await callback.message.delete()
            await state.set_state(From.drunk_form)
            await bot.send_message(callback.from_user.id, f"–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –≤—ã–ø–∏–≤–∞–µ—Ç–µ?",
                                   reply_markup=drunk_keyboard.as_markup(resize_keyboard=True))
    else:
        if callback.data == 'drunk':
            banlist.append("–°–æ–±—É—Ç—ã–ª—å–Ω–∏–∫–æ–≤")
        elif callback.data == 'friend':
            banlist.append("–î—Ä—É–∑–µ–π –∏ –∑–Ω–∞–∫–æ–º—ã—Ö")
        elif callback.data == 'social':
            banlist.append("–ï–¥–∏–Ω–æ–º—ã—à–ª–∏–Ω–∏–∫–æ–≤")
        elif callback.data == 'love_night':
            banlist.append("–û—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–∞ –Ω–æ—á—å")
        elif callback.data == 'love':
            banlist.append("–õ—é–±–æ–≤–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è")

        await state.update_data(banlist=banlist)

        await callback.answer()
        await callback.message.edit_text(
            text='–≤—ã–±—Ä–∞–Ω–æ',
            reply_markup=edit_keyboard_choice_friend(banlist).as_markup(resize_keyboard=True)
        )


@dp.callback_query(F.data.in_(['always_drunk', 'often_drunk', 'sometimes_drunk', 'rarely_drunk', 'not_drunk',
                               'back_drunk']))
async def about_drunk(callback: CallbackQuery, state: FSMContext):
    if callback.data == 'back_drunk':
        await callback.message.delete()
        await state.set_state(From.choice_friend_form)
        await bot.send_message(callback.from_user.id, f"–ö–æ–≥–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–µ–±–µ –Ω–∞–π—Ç–∏?",
                               reply_markup=ReplyKeyboardRemove())
        await bot.send_message(callback.from_user.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
                               reply_markup=edit_keyboard_choice_friend().as_markup(resize_keyboard=True))
    else:
        for row in callback.message.reply_markup.inline_keyboard:
            for button in row:
                if button.callback_data == callback.data:
                    await state.update_data(drunk=button.text)
                    break
        await state.set_state(From.choice_soul_form)
        await state.update_data(banlist_soul=[])
        await bot.send_message(callback.from_user.id, f"–û—Ç–ª–∏—á–Ω–æ",
                               reply_markup=ReplyKeyboardRemove())
        await bot.send_message(callback.from_user.id, f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ —á—Ç–æ –≤–∞–º –ø–æ –¥—É—à–µ:",
                               reply_markup=soul_keyboard().as_markup(resize_keyboard=True))
        await callback.message.delete()
        await callback.answer()


@dp.callback_query(F.data.in_(['walk', 'walk_drunk', 'walk_friend', 'bar',
                               'club', 'hookah', 'back_soul', 'submit_soul', 'journey', 'sport', 'table_game']))
async def process_buttons_press(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    banlist = data.get("banlist_soul")
    if callback.data == 'back_soul':
        await callback.message.delete()
        await state.set_state(From.drunk_form)
        await bot.send_message(callback.from_user.id, f"–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –≤—ã–ø–∏–≤–∞–µ—Ç–µ?",
                               reply_markup=ReplyKeyboardRemove())
        await bot.send_message(callback.from_user.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
                               reply_markup=drunk_keyboard.as_markup(resize_keyboard=True))
    elif callback.data == 'submit_soul':
        if len(banlist) == 0:
            await bot.send_message(callback.from_user.id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–∏—Ä–µ—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ —Å–ø–∏—Å–∫–∞?")
        else:
            await state.update_data(banlist_soul_result=banlist)
            await callback.message.delete()
            await state.set_state(From.sochial_network_form)
            await bot.send_message(callback.from_user.id, f"–ß–µ–º –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –æ—Å–Ω–æ–≤–µ?",
                                   reply_markup=sochial_network_keyboard.as_markup(resize_keyboard=True))
    else:
        if callback.data == 'walk':
            banlist.append("–ü—Ä–æ–≥—É–ª–∫–∏")
        elif callback.data == 'walk_drunk':
            banlist.append("–ü—Ä–æ–≥—É–ª–∫–∏ —Å –∞–ª–∫–æ–≥–æ–ª–µ–º")
        elif callback.data == 'walk_friend':
            banlist.append("–ü—Ä–æ–≥—É–ª–∫–∏ —Å –¥—Ä—É–∑—å—è–º–∏")
        elif callback.data == 'bar':
            banlist.append("–ë–∞—Ä")
        elif callback.data == 'club':
            banlist.append("–ö–ª—É–±")
        elif callback.data == 'hookah':
            banlist.append("–ö–∞–ª—å—è–Ω–Ω–∞—è")
        elif callback.data == 'journey':
            banlist.append("–ü–æ—Ö–æ–¥—ã")
        elif callback.data == 'sport':
            banlist.append("–°–ø–æ—Ä—Ç")
        elif callback.data == 'table_game':
            banlist.append("–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã")

        await state.update_data(banlist=banlist)

        await callback.answer()
        await callback.message.edit_text(
            text=f'{banlist[len(banlist) - 1]} –≤—ã–±—Ä–∞–Ω–æ',
            reply_markup=soul_keyboard(banlist).as_markup(resize_keyboard=True)
        )


@dp.callback_query(F.data.in_(['vk', 'tg', 'vk_and_tg', 'back_sochial']))
async def sochial_network_form(callback: CallbackQuery, state: FSMContext):
    if callback.data == "back_sochial":
        await state.set_state(From.choice_soul_form)
        await state.update_data(banlist_soul=[])
        await bot.send_message(chat_id=callback.from_user.id, text=f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ —á—Ç–æ –≤–∞–º –ø–æ –¥—É—à–µ:",
                               reply_markup=soul_keyboard().as_markup(resize_keyboard=True))
        await callback.message.delete()
    else:
        for row in callback.message.reply_markup.inline_keyboard:
            for button in row:
                if button.callback_data == callback.data:
                    await state.update_data(sochial_network=button.text)
                    break

        await callback.message.delete()
        await state.set_state(From.conflict_rate_from)
        await bot.send_message(chat_id=callback.from_user.id, text=f"–û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ—é –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 10",
                               reply_markup=default_keyboard.as_markup(resize_keyboard=True))


@dp.message(From.conflict_rate_from)
async def conflict_rate_from(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await state.set_state(From.sochial_network_form)
        await message.answer(f"–ß–µ–º –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –æ—Å–Ω–æ–≤–µ?",
                             reply_markup=sochial_network_keyboard.as_markup(resize_keyboard=True))
    else:
        pattern = r'^(\d{1,10})$'
        rate = re.search(pattern, message.text)
        if rate:
            if (int(message.text) <= 10) and (int(message.text) >= 0):
                await state.update_data(rate_conflict=message.text)
                await state.set_state(From.new_people_from)
                await message.answer(f"–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ —Ç–æ–º—É —á—Ç–æ–± –≤ –≤–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –Ω–æ–≤–µ–Ω—å–∫–∏–µ –ª—é–¥–∏?",
                                     reply_markup=new_people_keyboard.as_markup(resize_keyboard=True))
            else:
                await message.answer(f"–ü—Ä–æ–≤–µ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                                     reply_markup=default_keyboard.as_markup(resize_keyboard=True))
        else:
            await message.answer(f"–ü—Ä–æ–≤–µ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
                                 reply_markup=default_keyboard.as_markup(resize_keyboard=True))


@dp.callback_query(F.data.in_(['new_very_negative', 'new_negative', 'new_neutral', 'new_cool', 'new_back']))
async def about_from(callback: CallbackQuery, state: FSMContext):
    if callback.data == "new_back":
        await state.set_state(From.conflict_rate_from)
        await bot.send_message(text=f"–û—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ—é –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–æ—Å—Ç—å –æ—Ç 1 –¥–æ 10", chat_id=callback.from_user.id,
                               reply_markup=default_keyboard.as_markup(resize_keyboard=True))
        await callback.message.delete()
    else:
        for row in callback.message.reply_markup.inline_keyboard:
            for button in row:
                if button.callback_data == callback.data:
                    await state.update_data(new_people=button.text)
                    break
        await callback.message.delete()
        await state.set_state(From.link_form)
        await bot.send_message(text=f"–ü—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ VK (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è",
                               chat_id=callback.from_user.id,
                               reply_markup=default_keyboard.as_markup(resize_keyboard=True))


@dp.message(From.link_form)
async def about_from(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await state.set_state(From.new_people_from)
        await message.answer(f"–ö–∞–∫ –≤—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ—Å—å –∫ —Ç–æ–º—É —á—Ç–æ–± –≤ –≤–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é –ø—Ä–∏—Ö–æ–¥–∏–ª–∏ –Ω–æ–≤–µ–Ω—å–∫–∏–µ –ª—é–¥–∏?",
                             reply_markup=new_people_keyboard.as_markup(resize_keyboard=True))
    else:
        await state.update_data(login=message.text)
        await state.set_state(From.final_form)
        await message.answer(f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É?",
                             reply_markup=final_keyboard.as_markup(resize_keyboard=True))


@dp.message(From.final_form)
async def about_from(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await state.set_state(From.link_form)
        await message.answer(f"–ü—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ VK (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è",
                             reply_markup=default_keyboard.as_markup(resize_keyboard=True))
    elif message.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å":
        data = await state.get_data()
        name = data.get("name")
        age = data.get("age")
        city = data.get("city")
        about = data.get("about")
        banlist_result = data.get("banlist_result")
        drunk = data.get("drunk")
        banlist_soul_result = data.get("banlist_soul_result")
        sochial_network = data.get("sochial_network")
        rate_conflict = data.get("rate_conflict")
        new_people = data.get("new_people")
        login = data.get("login")

        text = (f"üí≠<b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {message.from_user.full_name}\n\n\n"
                f"‚Ä¢<b>–ò–º—è:</b> {name}\n"
                f"<b>‚Ä¢–í–æ–∑—Ä–∞—Å—Ç:</b> {age}\n"
                f"<b>‚Ä¢–ì–æ—Ä–æ–¥:</b> {city}\n"
                f"<b>‚Ä¢–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b> {about}\n"
                f"<b>‚Ä¢–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –¥—Ä—É–∑—å—è—Ö:</b> {''.join(', '.join(banlist_result))}\n"
                f"<b>‚Ä¢–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –∞–ª–∫–æ–≥–æ–ª—é:</b> {drunk}\n"
                f"<b>‚Ä¢–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è—Ö:</b> {''.join(', '.join(banlist_soul_result))}\n"
                f"<b>‚Ä¢–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:</b> {sochial_network}\n"
                f"<b>‚Ä¢–ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–æ—Å—Ç—å:</b> {rate_conflict}\n"
                f"<b>‚Ä¢–û—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –Ω–æ–≤–∏—á–∫–∞–º:</b> {new_people}\n"
                f"<b>‚Ä¢–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ VK:</b> {login}\n")
        if message.from_user.username is None:
            text += f'<b>‚Ä¢–ü—Ä–æ—Ñ–∏–ª—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ:</b> <a href="{message.from_user.url}">–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å</a>'
        else:
            text += (f'<b>‚Ä¢–ü—Ä–æ—Ñ–∏–ª—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ:</b>'
                     f' <a href="https://t.me/{message.from_user.username}">–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å</a>')
        # id group -1002165833102
        await bot.send_message("-1002165833102", text=text, parse_mode="html",
                               reply_markup=create_invite_keyboard(message.from_user.id).as_markup(),
                               disable_web_page_preview=True)
        await state.set_state(From.final_form)
        await state.clear()
        await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ä–º—É",
                             reply_markup=ReplyKeyboardRemove())


@dp.callback_query(lambda call: (call.data[:6] == "accept") or (call.data[:7] == "decline"))
async def accept_decline_user(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    callback_id_user_form_new_rec = data.get("callback_id_user_form")
    if callback_id_user_form_new_rec is None:
        callback_id_user_form_new_rec = {f"callback_{call.data.split("|")[1]}": Vote()}


    else:
        try:
            print(type(callback_id_user_form_new_rec[f"callback_{call.data.split("|")[1]}"]) == Vote)
        except:
            callback_id_user_form_new_rec[f"callback_{call.data.split("|")[1]}"] = Vote()
    await state.update_data(callback_id_user_form=callback_id_user_form_new_rec)
    data = await state.get_data()
    callback_id_user_form_new_rec = data.get("callback_id_user_form")
    if call.data[:7] == "decline":
        if callback_id_user_form_new_rec.get(f"callback_{call.data.split("|")[1]}").append_list_votes(
                call.from_user.id):

            callback_id_user_form_new_rec.get(f"callback_{call.data.split("|")[1]}").append_col_for_drop()
            if callback_id_user_form_new_rec.get(f"callback_{call.data.split("|")[1]}").col_for_drop < 3:
                try:
                    await bot.delete_message(chat_id="-1002165833102",
                                             message_id=
                                             callback_id_user_form_new_rec.get(f"callback_{call.data.split("|")[1]}").id_mes_del.message_id)
                except:
                    pass
                text = (f"–ß—Ç–æ–±—ã –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –µ—â—ë"
                        f" {3 - callback_id_user_form_new_rec.get(f"callback_{call.data.split("|")[1]}").col_for_drop}")
            else:
                try:
                    await bot.delete_message(chat_id="-1002165833102",
                                             message_id=
                                             callback_id_user_form_new_rec.get(f"callback_{call.data.split("|")[1]}").id_mes_del.message_id)
                    await bot.delete_message(chat_id="-1002165833102",
                                             message_id=
                                             callback_id_user_form_new_rec.get(
                                                 f"callback_{call.data.split("|")[1]}").id_mes_add.message_id)
                except:
                    pass
                del callback_id_user_form_new_rec[(f"callback_{call.data.split("|")[1]}")]
                text = "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"
                await (call.message.edit_reply_markup
                       (inline_message_id=str(call.message.message_id),
                        reply_markup=
                        create_add_or_drop_on_group_keyboard(call.from_user.id, "drop").as_markup()))
            try:
                callback_id_user_form_new_rec.get(f"callback_{call.data.split("|")[1]}").id_mes_del = await bot.send_message(chat_id=call.message.chat.id, text=text)
            except:
                pass
            await state.update_data(callback_id_user_form=callback_id_user_form_new_rec)
        else:
            await bot.send_message(chat_id="-1002165833102", text=f"{call.from_user.first_name} —Ç—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª")
        await call.answer()
    elif call.data[:6] == "accept":
        if callback_id_user_form_new_rec.get(f"callback_{call.data.split("|")[1]}").append_list_votes(
                call.from_user.id):

            callback_id_user_form_new_rec.get(f"callback_{call.data.split("|")[1]}").append_col_for_add()
            if callback_id_user_form_new_rec.get(f"callback_{call.data.split("|")[1]}").col_for_add < 3:
                try:
                    await bot.delete_message(chat_id="-1002165833102",
                                             message_id=
                                             callback_id_user_form_new_rec.get(f"callback_{call.data.split("|")[1]}").id_mes_add.message_id)
                except:
                    pass
                text = (f"–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –µ—â—ë"
                        f" {3 - callback_id_user_form_new_rec.get(f"callback_{call.data.split("|")[1]}").col_for_add}")
            else:
                try:

                    await bot.delete_message(chat_id="-1002165833102",
                                             message_id=
                                             callback_id_user_form_new_rec.get(f"callback_{call.data.split("|")[1]}").id_mes_add.message_id)
                    await bot.delete_message(chat_id="-1002165833102",
                                             message_id=
                                             callback_id_user_form_new_rec.get(
                                                 f"callback_{call.data.split("|")[1]}").id_mes_del.message_id)
                except:
                    pass
                del callback_id_user_form_new_rec[(f"callback_{call.data.split("|")[1]}")]
                text = "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞"
                await (call.message.edit_reply_markup
                       (inline_message_id=str(call.message.message_id),
                        reply_markup=
                        create_add_or_drop_on_group_keyboard(call.from_user.id, "add").as_markup()))

            try:
                callback_id_user_form_new_rec.get(f"callback_{call.data.split("|")[1]}").id_mes_add = await bot.send_message(chat_id=call.message.chat.id, text=text)
            except:
                pass

            await state.update_data(callback_id_user_form=callback_id_user_form_new_rec)

        else:
            await bot.send_message(chat_id="-1002165833102", text=f"{call.from_user.first_name} —Ç—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª")
        await call.answer()


@dp.callback_query(lambda call: (call.data[:3] == "add") or (call.data[:4] == "drop")
                                or (call.data[:12] == "back_actions"))
async def add_on_group_or_not(call: types.CallbackQuery, state: FSMContext):
    if call.data[:12] == "back_actions":
        await call.message.edit_reply_markup(inline_message_id=str(call.message.message_id),
                                             reply_markup=create_invite_keyboard(call.data.split("|")[1]).as_markup())
        await bot.send_message(chat_id=call.message.chat.id, text="–•–æ—Ä–æ—à–æ, –ø–æ–¥—É–º–∞–π—Ç–µ –µ—â—ë")
    elif call.data[:3] == "add":

        await call.message.edit_reply_markup(inline_message_id=str(call.message.message_id), reply_markup=None)
        await call.answer()
        await bot.send_message(chat_id=call.message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç:",
                               reply_markup=create_city_keyboard(call.data.split("|")[1]).as_markup())

    elif call.data[:4] == "drop":
        await call.message.edit_reply_markup(inline_message_id=str(call.message.message_id), reply_markup=None)
        await call.answer()
        await bot.send_message(chat_id=call.message.chat.id, text="–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞")


@dp.callback_query(lambda call: (call.data[:4] == "city"))
async def choice_city(call: types.CallbackQuery, state: FSMContext):
    city = call.data.split("|")[2]
    user_id = call.data.split("|")[1]
    link = get_link(city)
    await bot.send_message(chat_id=call.message.chat.id, text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞")
    text = (f'<b>–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ–¥–æ–±—Ä–µ–Ω–∞</b>‚úÖ\n<b><i>–°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ:</i></b>\n{link}\n'
            '<b>–ß–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è</b> —Å '
            '—É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ <b>"–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã"</b>')
    await bot.send_message(chat_id=user_id, text=text, parse_mode="html")
    await call.answer()
    await call.message.delete()


@dp.message(F.text.lower() == "–Ω–∞–∑–∞–¥")
async def form(message: Message, state: FSMContext):
    await message.answer("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
                         reply_markup=default_keyboard.as_markup(resize_keyboard=True))


@dp.message(Command("admin"))
async def any_message(message: Message, state: FSMContext):

    if str(message.from_user.id) == "605578928":
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!\n"
                             "–î–ª—è —Å–º–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–æ—Ä–æ–¥ –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É",
                             reply_markup=create_change_city_keyboard().as_markup(resize_keyboard=True))


@dp.callback_query(lambda call: ((call.data[:11] == "change_city") or (call.data == "change_city_back")))
async def change_city(call: types.CallbackQuery, state: FSMContext):
    if call.data == "change_city_back":
        await bot.send_message(chat_id=call.from_user.id, text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                               reply_markup=ReplyKeyboardRemove())
        await bot.send_message(chat_id=call.from_user.id, text="üëæ–ü—Ä–∏–≤–µ—Ç! –ò—â–µ—à—å –∫–æ–º–ø–∞–Ω–∏—é?\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤ –Ω–µ—ë –ø–æ–ø–∞—Å—Ç—å,"
                             " –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ, –ø–æ–µ—Ö–∞–ª–∏?",
                             reply_markup=start_keyboard.as_markup(resize_keyboard=True))
    else:
        await state.update_data(changer_city=call.data.split("|")[1])
        await state.set_state(From.change_city)
        await bot.send_message(chat_id=call.from_user.id, text="–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É",
                               reply_markup=default_keyboard.as_markup())
    await call.message.delete()


@dp.message(From.change_city)
async def change_city(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!\n"
                                  "–î–ª—è —Å–º–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–æ—Ä–æ–¥ –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É",
                                  reply_markup=create_change_city_keyboard().as_markup(resize_keyboard=True))
    else:
        data = await state.get_data()
        city = data.get("changer_city")
        if update_link_city(city, message.text):
            await message.answer("–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω–∞")
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!\n"
                                 "–î–ª—è —Å–º–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–æ—Ä–æ–¥ –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É",
                                 reply_markup=create_change_city_keyboard().as_markup(resize_keyboard=True))
        else:
            await message.answer("–ü—Ä–∏ –∑–∞–º–µ–Ω–µ —Å—Å—ã–ª–∫–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n"
                                 "–î–ª—è —Å–º–µ–Ω—ã —Å—Å—ã–ª–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –≥–æ—Ä–æ–¥ –∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É",
                                 reply_markup=create_change_city_keyboard().as_markup(resize_keyboard=True))
    await state.clear()
if __name__ == "__main__":
    asyncio.run(start())
