from aiogram.types import InlineKeyboardMarkup, ReplyKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import types
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from conec import *

start_keyboard = ReplyKeyboardBuilder()
start_keyboard.add(types.KeyboardButton(text="üëæ –ü–æ–µ—Ö–∞–ª–∏"))

default_keyboard = ReplyKeyboardBuilder()
default_keyboard.add(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))



def edit_keyboard_choice_friend(ban_list=[]):
    dict_categories_choice_friend = {
        "–î—Ä—É–∑–µ–π –∏ –∑–Ω–∞–∫–æ–º—ã—Ö": types.InlineKeyboardButton(text="–î—Ä—É–∑–µ–π –∏ –∑–Ω–∞–∫–æ–º—ã—Ö", callback_data="friend"),
        "–°–æ–±—É—Ç—ã–ª—å–Ω–∏–∫–æ–≤": types.InlineKeyboardButton(text="–°–æ–±—É—Ç—ã–ª—å–Ω–∏–∫–æ–≤", callback_data="drunk"),
        "–û—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–∞ –Ω–æ—á—å": types.InlineKeyboardButton(text="–û—Ç–Ω–æ—à–µ–Ω–∏—è –Ω–∞ –Ω–æ—á—å", callback_data="love_night"),
        "–õ—é–±–æ–≤–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è": types.InlineKeyboardButton(text="–õ—é–±–æ–≤–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è", callback_data="love"),
        "–ï–¥–∏–Ω–æ–º—ã—à–ª–∏–Ω–∏–∫–æ–≤": types.InlineKeyboardButton(text="–ï–¥–∏–Ω–æ–º—ã—à–ª–∏–Ω–∏–∫–æ–≤", callback_data="social"),
        "–ù–∞–∑–∞–¥": types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back"),
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å": types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="submit")}
    choice_friend_keyboard = InlineKeyboardBuilder()
    for key in dict_categories_choice_friend.keys():
        if ban_list.count(key) > 1:
            ban_list.pop(ban_list.index(key))
            ban_list.pop(ban_list.index(key))

    for ban_word in ban_list:
        if dict_categories_choice_friend.get(ban_word) is not None:
            button = dict_categories_choice_friend.get(ban_word)

            dict_categories_choice_friend.get(ban_word).text = "‚úÖ" + button.text

    row = 0
    row_list = []
    for button in dict_categories_choice_friend.values():
        if row % 2 == 0:
            choice_friend_keyboard.row(*row_list)
            row_list.clear()
        row += 1
        row_list.append(button)
    else:
        choice_friend_keyboard.row(*row_list)
    return choice_friend_keyboard


def soul_keyboard(ban_list=[]):
    choice_soul_keyboard = InlineKeyboardBuilder()
    dict_categories_choice_soul = {
        "–ü—Ä–æ–≥—É–ª–∫–∏": types.InlineKeyboardButton(text="–ü—Ä–æ–≥—É–ª–∫–∏", callback_data="walk"),
        "–ü—Ä–æ–≥—É–ª–∫–∏ —Å –¥—Ä—É–∑—å—è–º–∏": types.InlineKeyboardButton(text="–ü—Ä–æ–≥—É–ª–∫–∏ —Å –¥—Ä—É–∑—å—è–º–∏", callback_data="walk_friend"),
        "–ü—Ä–æ–≥—É–ª–∫–∏ —Å –∞–ª–∫–æ–≥–æ–ª–µ–º": types.InlineKeyboardButton(text="–ü—Ä–æ–≥—É–ª–∫–∏ —Å –∞–ª–∫–æ–≥–æ–ª–µ–º", callback_data="walk_drunk"),
        "–ë–∞—Ä": types.InlineKeyboardButton(text="–ë–∞—Ä", callback_data="bar"),
        "–ö–ª—É–±": types.InlineKeyboardButton(text="–ö–ª—É–±", callback_data="club"),
        "–ö–∞–ª—å—è–Ω–Ω–∞—è": types.InlineKeyboardButton(text="–ö–∞–ª—å—è–Ω–Ω–∞—è", callback_data="hookah"),
        "–ü–æ—Ö–æ–¥—ã": types.InlineKeyboardButton(text="–ü–æ—Ö–æ–¥—ã", callback_data="journey"),
        "–°–ø–æ—Ä—Ç": types.InlineKeyboardButton(text="–°–ø–æ—Ä—Ç", callback_data="sport"),
        "–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã": types.InlineKeyboardButton(text="–ù–∞—Å—Ç–æ–ª—å–Ω—ã–µ –∏–≥—Ä—ã", callback_data="table_game"),
        "–ù–∞–∑–∞–¥": types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_soul"),
        "–û—Ç–ø—Ä–∞–≤–∏—Ç—å": types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="submit_soul"),

    }
    for key in dict_categories_choice_soul.keys():
        if ban_list.count(key) > 1:
            ban_list.pop(ban_list.index(key))
            ban_list.pop(ban_list.index(key))
    for ban_word in ban_list:
        if dict_categories_choice_soul.get(ban_word) is not None:
            button = dict_categories_choice_soul.get(ban_word)

            dict_categories_choice_soul.get(ban_word).text = "‚úÖ" + button.text

    row = 0
    row_list = []
    for button in dict_categories_choice_soul.values():
        if row % 2 == 0:
            choice_soul_keyboard.row(*row_list)
            row_list.clear()
        row += 1
        row_list.append(button)
    else:
        choice_soul_keyboard.row(*row_list)
    return choice_soul_keyboard


drunk_keyboard = InlineKeyboardBuilder()
drunk_keyboard.row(types.InlineKeyboardButton(text="–û—á–µ–Ω—å —á–∞—Å—Ç–æ", callback_data="always_drunk"),
                   types.InlineKeyboardButton(text="–ß–∞—Å—Ç–æ", callback_data="often_drunk"),
                   types.InlineKeyboardButton(text="–ò–Ω–æ–≥–¥–∞", callback_data="sometimes_drunk"))
drunk_keyboard.row(types.InlineKeyboardButton(text="–û—á–µ–Ω—å —Ä–µ–¥–∫–æ", callback_data="rarely_drunk"),
                   types.InlineKeyboardButton(text="–ù–µ –ø—å—é —Å–æ–≤—Å–µ–º", callback_data="not_drunk"),
                   types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_drunk"))

sochial_network_keyboard = InlineKeyboardBuilder()
sochial_network_keyboard.row(types.InlineKeyboardButton(text="Vk", callback_data="vk"),
                             types.InlineKeyboardButton(text="Telegram", callback_data="tg"))
sochial_network_keyboard.row(types.InlineKeyboardButton(text="–ò VK –∏ Telegram", callback_data="vk_and_tg"),
                             types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_sochial"))


new_people_keyboard = InlineKeyboardBuilder()
new_people_keyboard.row(types.InlineKeyboardButton(text="–ö—Ä–∞–π–Ω–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ", callback_data="new_very_negative"),
                            types.InlineKeyboardButton(text="–ù–µ–≥–∞—Ç–∏–≤–Ω–æ", callback_data="new_negative"),
                            types.InlineKeyboardButton(text="–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ", callback_data="new_neutral"))
new_people_keyboard.row(types.InlineKeyboardButton(text="–û—Ç–ª–∏—á–Ω–æ! –ª—é–±–ª—é –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞", callback_data="new_cool"),
                        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="new_back"))

final_keyboard = ReplyKeyboardBuilder()
final_keyboard.add(types.KeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"), types.KeyboardButton(text="–ù–∞–∑–∞–¥"))


def create_invite_keyboard(user_id):
    invite_keyboard = InlineKeyboardBuilder()
    invite_keyboard.row(types.InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept|{user_id}"),
                                types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline|{user_id}"))
    return invite_keyboard


def create_add_or_drop_on_group_keyboard(user_id, action):
    add_on_group_keyboard = InlineKeyboardBuilder()
    add_on_group_keyboard.row(types.InlineKeyboardButton(text="‚úÖ –î–∞, –º—ã —É–≤–µ—Ä–µ–Ω—ã",
                                                         callback_data=f"{action}|{user_id}"),
                                types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"back_actions|{user_id}"))
    return add_on_group_keyboard


def create_city_keyboard(user_id):
    cites = get_cities()

    city_keyboard = InlineKeyboardBuilder()
    for city in cites:
        city_keyboard.row(types.InlineKeyboardButton(text=f"{city[0]}", callback_data=f"city|{user_id}|{city[0]}"))

    return city_keyboard


def create_change_city_keyboard():
    cites = get_cities()

    city_keyboard = InlineKeyboardBuilder()
    for city in cites:
        city_keyboard.row(types.InlineKeyboardButton(text=f"{city[0]}", callback_data=f"change_city|{city[0]}"))

    city_keyboard.row(types.InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥", callback_data=f"change_city_back"))
    return city_keyboard